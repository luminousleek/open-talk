{"version":3,"sources":["AppModes.tsx","PlayingCard.tsx","decks.ts","Categories.tsx","Grid.tsx","importExportFile.tsx","About.tsx","MenuCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppModes","EmptyCard","title","depth","question","category","covered","buttonEnabled","selected","uncover","disableButton","enableButton","select","deselect","this","QuestionCard","DisplayCard","card","onClick","cardStyle","width","maxWidth","minHeight","wordBreak","Card","bg","text","style","Header","Body","Title","Button","size","variant","Subtitle","Text","AccordionCardDisplay","frontCard","backCard","Row","Col","className","openTalkDeck","cards","categories","parseDeck","deckString","parsed","i","length","j","cardString","push","shuffle","pile","randomIndex","currentIndex","shuffledPile","Math","floor","random","Pile","unshift","React","coveredPile","setCovered","uncoveredPile","setUncovered","render","toggleRender","Container","temp","pop","next","undefined","CategoriesMode","prop","shuffled","deck","shuffledDeck","shuffleDeck","display","map","xs","indexOf","GridMode","cardsUsed","reduce","accumulator","value","concat","slice","blankCard","cardsOpened","setCardsOpened","recentCard","setRecentCard","cardGrid","setGrid","uncoverCard","row","col","GridSquare","GridRow","cols","rowArr","sm","ExportDeck","flattened","deckText","openCard","closedCard","openSampleCard","closedSampleCard","openMissingCard","closedMissingCard","importText","Accordion","Toggle","as","eventKey","Collapse","href","target","rel","aboutText","MenuCard","height","header","cardText","disabled","buttonText","App","useState","MainScreen","mode","setMode","setDeck","importQns","setQn","importTitle","setTitle","hasImported","setImported","importDeck","setImportDeck","isValidImport","setValidImport","importErrorString","setErrorString","hasImportError","toggleImportError","forceRender","forceRender2","toggleRender2","actuallyImport","importedDeck","errors","errorString","numCards","categoryIndex","categoryCount","categoryMap","Map","split","cardInfo","has","get","MAX_CATEGORIES","set","cardTuple","Imported","fluid","ScreenHeader","deckHeader","modeSelectButtons","SelectGameMode","mainMenuButton","newGameButton","withReactContent","Swal","fire","icon","showCancelButton","confirmButtonText","confirmButtonColor","cancelButtonText","reverseButtons","then","result","isConfirmed","Importing","About","Categories","Grid","Form","id","onSubmit","event","preventDefault","Group","controlId","Label","Control","onChange","e","required","defaultValue","maxLength","rows","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.327316e6.chunk.js","sourcesContent":["export enum AppModes {\r\n    MainScreen,\r\n    SelectGameMode,\r\n    Categories,\r\n    Grid,\r\n    Importing,\r\n    Imported,\r\n    About\r\n}","import './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { CSSProperties } from 'react';\r\n\r\nexport type CardTuple = [string, string, string, string];\r\n\r\nexport interface PlayingCard {\r\n    title: string;\r\n    depth: string;\r\n    question: string;\r\n    category: string;\r\n    covered: boolean;\r\n    buttonEnabled: boolean;\r\n    selected: boolean;\r\n\r\n    uncover(): void;\r\n\r\n    disableButton(): void;\r\n    enableButton(): void;\r\n\r\n    select(): void;\r\n    deselect(): void;\r\n}\r\n\r\nexport class EmptyCard implements PlayingCard {\r\n    \r\n    title: string;\r\n    depth: string;\r\n    question: string;\r\n    category: string;\r\n    covered: boolean;\r\n    buttonEnabled: boolean;\r\n    selected: boolean;\r\n\r\n    constructor(title: string) {\r\n        this.title = title;\r\n        this.depth = \"\\u200b\";\r\n        this.question = \"\";\r\n        this.category = \"\";\r\n        this.covered = false;\r\n        this.buttonEnabled = false;\r\n        this.selected = false;\r\n    }\r\n\r\n    uncover = () => {};\r\n\r\n    disableButton = () => {};\r\n    enableButton = () => {};\r\n\r\n    select = () => {};\r\n    deselect = () => {};\r\n}\r\n\r\nexport class QuestionCard implements PlayingCard {\r\n    \r\n    title: string;\r\n    depth: string;\r\n    question: string;\r\n    category: string;\r\n    covered: boolean;\r\n    buttonEnabled: boolean;\r\n    selected: boolean;\r\n\r\n    constructor(title: string, depth: string, question: string, category: string) {\r\n        this.title = title;\r\n        this.depth = depth;\r\n        this.question = question;\r\n        this.category = category;\r\n        this.covered = true;\r\n        this.buttonEnabled = true;\r\n        this.selected = false;\r\n    }\r\n\r\n    uncover = () => {this.covered = false};\r\n\r\n    disableButton = () => {this.buttonEnabled = false};\r\n    enableButton = () => {this.buttonEnabled = true};\r\n\r\n    select = () => {this.selected = true};\r\n    deselect = () => {this.selected = false};\r\n}\r\n\r\nexport function DisplayCard(card: PlayingCard, onClick:() => void): JSX.Element {\r\n    // card properties\r\n    const title:string = card.title;\r\n    const depth:string = card.depth;\r\n    const question:string = card.question;\r\n    const category:string = card.category;\r\n    let covered: boolean = card.covered;\r\n    let selected: boolean = card.selected;\r\n    const buttonEnabled: boolean = card.buttonEnabled;\r\n\r\n    let cardStyle:CSSProperties = {width:'100%', maxWidth:'12rem', minHeight: '18rem', wordBreak:'break-word'}\r\n    let displayed:JSX.Element;\r\n\r\n    if (covered) {\r\n      displayed = <Card \r\n                bg='light'\r\n                text='dark' \r\n                style={cardStyle}>\r\n                <Card.Header>{depth}</Card.Header>\r\n                <Card.Body>\r\n                  <Card.Title>{category}</Card.Title>\r\n                </Card.Body>\r\n                {buttonEnabled && <Button\r\n                    size='sm' \r\n                    variant=\"info\"\r\n                    onClick={onClick}>\r\n                    Uncover card\r\n                </Button>}\r\n              </Card>\r\n    } else if (selected) {\r\n      displayed = <Card \r\n                bg='info'\r\n                text='white' \r\n                style={cardStyle}>\r\n                <Card.Header>{depth}</Card.Header>\r\n                <Card.Body>\r\n                  <Card.Title>{title}</Card.Title>\r\n                  <Card.Subtitle>{category}</Card.Subtitle>\r\n                  <Card.Text>{question}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n    } else {\r\n      displayed = <Card \r\n                bg='dark'\r\n                text='white' \r\n                style={cardStyle}>\r\n                <Card.Header>{depth}</Card.Header>\r\n                <Card.Body>\r\n                  <Card.Title>{title}</Card.Title>\r\n                  <Card.Subtitle>{category}</Card.Subtitle>\r\n                  <Card.Text>{question}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n    }\r\n    return displayed;\r\n}\r\n\r\nexport function AccordionCardDisplay(frontCard:PlayingCard, backCard:PlayingCard):JSX.Element {\r\n  return (\r\n    <>\r\n      <Row>\r\n          <Col className=\"d-flex justify-content-center\">\r\n                  {DisplayCard(frontCard, () => {})}\r\n          </Col>\r\n          <Col className=\"d-flex justify-content-center\">\r\n                  {DisplayCard(backCard, () => {})}\r\n          </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col className=\"d-flex justify-content-center\">\r\n          <p>Front of card</p>\r\n        </Col>\r\n        <Col className=\"d-flex justify-content-center\">\r\n          <p>Back of card</p>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}","// file containing open talk deck and deck functions\r\nimport { PlayingCard, QuestionCard, CardTuple} from './PlayingCard';\r\n\r\n// type alias for deck\r\nexport type CardDeck = {\r\n  cards: CardTuple[][];\r\n  title: string;\r\n  categories: string[];\r\n}\r\n\r\nconst openTalkSelf:CardTuple[] = [\r\n  ['', 'Launch', 'What are your pet peeves?', 'Self'],\r\n  ['', 'Launch', \"What is the most amount of money you've spent on something you absolutely did not need at all?\", 'Self'],\r\n  ['', 'Launch', 'If you had to fight for one global cause for the rest of your life, what would it be?', 'Self'],\r\n  ['', 'Launch', 'If you could have one superpower, what would it be?', 'Self'],\r\n  ['', 'Launch', 'If you could only eat one thing for the rest of your life, what would it be?', 'Self'],\r\n  ['', 'Launch', 'Which is one animal that you absolutely cannot imagine having around?', 'Self'],\r\n  ['', 'Launch', 'Describe your morning routine.', 'Self'],\r\n  ['', 'Launch', 'What is the best vacation you have been on?', 'Self'],\r\n  ['', 'Launch', 'What are your thoughts on having breakfast in bed?', 'Self'],\r\n  ['', 'Launch', 'What is one item you must have in your future home?', 'Self'],\r\n  ['', 'Launch', 'What is one item you cannot live without?', 'Self'],\r\n  ['', 'Launch', 'What refreshes you?', 'Self'],\r\n  ['', 'Launch', 'What are you passionate about?', 'Self'],\r\n  ['', 'Launch', 'What is on your bucket list?', 'Self'],\r\n  ['', 'Dive', 'How do you deal with conflict?', 'Self'],\r\n  ['', 'Dive', 'What is the best moment of your life?', 'Self'],\r\n  ['', 'Dive', 'When was the last time you had a heart to heart talk?', 'Self'],\r\n  ['', 'Dive', 'What do you admire about youself?', 'Self'],\r\n  ['', 'Dive', 'What is your best childhood memory?', 'Self'],\r\n  ['', 'Dive', 'What is one thing that stresses you the most, and how do you deal with the stress?', 'Self'],\r\n  ['', 'Dive', 'What was the last thing that made you cry?', 'Self'],\r\n  ['', 'Dive', 'What is your biggest regret?', 'Self'],\r\n  ['', 'Dive', 'When have you felt the most proud?', 'Self'],\r\n  ['', 'Dive', 'Describe the time you felt the most afraid.', 'Self'],\r\n  ['', 'Dive', 'What is one area you could do better in?', 'Self'],\r\n  ['', 'Dive', 'Do you think you have reached your potential?', 'Self'],\r\n  ['', 'Dive', 'What is one thing you know you should have done, but never did?', 'Self'],\r\n  ['', 'Dive', 'When have you felt like your hopes were dashed?', 'Self'],\r\n  ['', 'Dive', 'When was the last time you felt frustrated?', 'Self'],\r\n  ['', 'Dive', 'When was the last time you felt insecure?', 'Self'],\r\n  ['', 'Dive', 'What makes you who you are?', 'Self'],\r\n  ['', 'Dive', 'What is one thing you find difficult to compromise on?', 'Self']\r\n];\r\n\r\nconst openTalkClan:CardTuple[] = [\r\n  ['', 'Launch', 'What is the best compliment you have ever received?', 'Clan'],\r\n  ['', 'Launch', 'Do you prefer meeting many people for a meal, or one to one?', 'Clan'],\r\n  ['', 'Launch', 'What is the most important quality you think a friend should have?', 'Clan'],\r\n  ['', 'Launch', 'What is the most comfortable friendship you have had?', 'Clan'],\r\n  ['', 'Launch', 'Which friend group makes you feel the most comfortable being in?', 'Clan'],\r\n  ['', 'Launch', 'What instantly makes someone your friend?', 'Clan'],\r\n  ['', 'Launch', 'How do you prefer to be comforted when you are upset?', 'Clan'],\r\n  ['', 'Launch', 'What is the best gift you have ever received from your friends?', 'Clan'],\r\n  ['', 'Launch', 'What qualities do you admire most in your friends?', 'Clan'],\r\n  ['', 'Launch', 'What is your favourite activity to do with your friends?', 'Clan'],\r\n  ['', 'Launch', 'Where and when did you meet your closest friends?', 'Clan'],\r\n  ['', 'Launch', 'Are you still in contact with your first best friend?', 'Clan'],\r\n  ['', 'Dive', 'Who do you feel most supported by?', 'Clan'],\r\n  ['', 'Dive', 'Does your family know your friends personally? Why or why not?', 'Clan'],\r\n  ['', 'Dive', 'Describe the most difficult friendship you have had', 'Clan'],\r\n  ['', 'Dive', 'Do you think you are a good friend? How can you be a better friend?', 'Clan'],\r\n  ['', 'Dive', 'What is the most embarrassing thing you have done with your friends?', 'Clan'],\r\n  ['', 'Dive', 'How do you react when your friend has a differing opinion from you?', 'Clan'],\r\n  ['', 'Dive', 'Do you make friends easily? Why or why not?', 'Clan'],\r\n  ['', 'Dive', 'Describe your relationship with your family', 'Clan'],\r\n  ['', 'Dive', 'What is your relationship like with your parents?', 'Clan'],\r\n  ['', 'Dive', 'What was the most awkward incident between you and your friend(s)?', 'Clan'],\r\n  ['', 'Dive', 'Do you think you are similar to your friends? Why or why not?', 'Clan'],\r\n  ['', 'Dive', 'Can you have a working relationship with your friends? Why or why not?', 'Clan'],\r\n  ['', 'Dive', 'When was it the hardest to forgive someone?', 'Clan']\r\n];\r\n\r\nconst openTalkLove:CardTuple[] = [\r\n  ['', 'Launch', 'What is your love language?', 'Love'],\r\n  ['', 'Launch', 'What is the first thing you notice when you meet a person?', 'Love'],\r\n  ['', 'Launch', 'What does love mean to you?', 'Love'],\r\n  ['', 'Launch', 'How ready for a relationship are you?', 'Love'],\r\n  ['', 'Launch', 'What would you feel if you had to break up or get married tomorrow?', 'Love'],\r\n  ['', 'Launch', 'How long do you think you would need to know someone before marrying them?', 'Love'],\r\n  ['', 'Launch', 'Can you go a week without contacting your partner or crush? Why or why not?', 'Love'],\r\n  ['', 'Launch', 'How would you resolve conflict in a relationship?', 'Love'],\r\n  ['', 'Launch', 'What is your opinion on love at first sight?', 'Love'],\r\n  ['', 'Launch', 'Describe your ideal partner', 'Love'],\r\n  ['', 'Launch', 'Do you believe in soulmates?', 'Love'],\r\n  ['', 'Launch', 'Describe your first crush', 'Love'],\r\n  ['', 'Launch', 'How did you first meet your partner?', 'Love'],\r\n  ['', 'Dive', 'What is the biggest compromise you have had to make in your relationship?', 'Love'],\r\n  ['', 'Dive', 'Are you comfortable in your current relationship?', 'Love'],\r\n  ['', 'Dive', 'What do you admire the most in a person?', 'Love'],\r\n  ['', 'Dive', 'Have you felt like you could live with someone forever?', 'Love'],\r\n  ['', 'Dive', 'What would you do if your family disapproves of your partner or crush?', 'Love'],\r\n  ['', 'Dive', 'What are you most afraid of letting your partner or crush know about you?', 'Love'],\r\n  ['', 'Dive', 'What could be improved on in your relationship?', 'Love'],\r\n  ['', 'Dive', 'Have you ever lied to your partner or crush? If yes, what for?', 'Love'],\r\n  ['', 'Dive', 'What was the best moment in your relationship?', 'Love'],\r\n  ['', 'Dive', 'What are your thoughts on starting your own family?', 'Love']\r\n]\r\n\r\nconst openTalkFun:CardTuple[] = [\r\n  ['', '\\u200b', 'If you had to choose, what animal will you ride on for the rest of your life?', 'Fun'],\r\n  ['', '\\u200b', 'What is the most important item in your pencil case?', 'Fun'],\r\n  ['', '\\u200b', 'How often do you eat your favourite food?', 'Fun'],\r\n  ['', '\\u200b', 'What is your favourite TV series?', 'Fun'],\r\n  ['', '\\u200b', 'What is the nicest sounding name you have ever heard?', 'Fun'],\r\n  ['', '\\u200b', 'Given the opportunity, what is one musical instrument you would like to learn?', 'Fun'],\r\n  ['', '\\u200b', 'If you had the chance to teleport to any country for a day, where would you go? Why?', 'Fun'],\r\n  ['', '\\u200b', 'Describe the most dramatic moment of your life.', 'Fun'],\r\n  ['', '\\u200b', 'If you could eliminate one food so no one could eat it ever again, what would you destroy?', 'Fun'],\r\n  ['', '\\u200b', 'What two things do you consider yourself to be very bad at?', 'Fun']\r\n]\r\n\r\nexport const openTalkDeck:CardDeck = {\r\n  cards: [openTalkSelf, openTalkClan, openTalkLove, openTalkFun],\r\n  title: \"open talk\",\r\n  categories: ['Self', 'Clan', 'Love', 'Fun']\r\n}\r\n// converts 2-dim array of tuples into 2-dim array of PlayingCards\r\nexport function parseDeck(deckString:CardTuple[][]):PlayingCard[][] {\r\n\r\n    let parsed:PlayingCard[][] = [];\r\n    for (let i = 0; i < deckString.length; i++) {\r\n        let category:PlayingCard[] = [];\r\n        for (let j = 0; j < deckString[i].length; j++) {\r\n            let cardString:CardTuple = deckString[i][j];\r\n            let card:PlayingCard = new QuestionCard(cardString[0], cardString[1], cardString[2], cardString[3]);\r\n            category.push(card);\r\n        }\r\n        parsed.push(category);\r\n    }\r\n    return parsed;\r\n}\r\n\r\nexport function shuffleDeck(deck:PlayingCard[][]):PlayingCard[][] {\r\n\r\n  let shuffledDeck:PlayingCard[][] = [];\r\n  \r\n  for (let pile of deck) {\r\n    shuffledDeck.push(shuffle(pile));\r\n  }\r\n  return shuffledDeck;\r\n}\r\n\r\nexport function shuffle(pile:PlayingCard[]):PlayingCard[] {\r\n  var currentIndex = pile.length,  randomIndex;\r\n  let shuffledPile = pile;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [shuffledPile[currentIndex], shuffledPile[randomIndex]] = [\r\n      shuffledPile[randomIndex], shuffledPile[currentIndex]];\r\n  }\r\n  return shuffledPile;\r\n}\r\n\r\nexport function flatten(cards:CardTuple[][]):CardTuple[] {\r\n  return cards.reduce((accumulator, value) => accumulator.concat(value), []);\r\n}","import * as React from \"react\";\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { CardDeck, parseDeck, shuffleDeck } from './decks';\r\nimport { PlayingCard, EmptyCard, DisplayCard} from './PlayingCard';\r\n\r\nfunction Pile(cards:PlayingCard[], category:string): JSX.Element {\r\n    cards.unshift(new EmptyCard(\"No more cards\"));\r\n    const [coveredPile, setCovered] = React.useState<PlayingCard[]>(cards);\r\n    const [uncoveredPile, setUncovered] = React.useState<PlayingCard[]>([new EmptyCard(\"No cards opened\")]);\r\n    const [render, toggleRender] = React.useState(true); // used to force React to render\r\n\r\n    const nextCard = () => {\r\n        const temp:PlayingCard | undefined = coveredPile.pop()\r\n        const next:PlayingCard = temp === undefined ? new EmptyCard(\"No more cards\") : temp;\r\n        next.uncover();\r\n        next.disableButton();\r\n        uncoveredPile.push(next);\r\n        setCovered(coveredPile);\r\n        setUncovered(uncoveredPile);\r\n        toggleRender(render === true ? false : true);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n          <Col>\r\n            <Row className=\"justify-content-center\"><h3>{category}</h3></Row>\r\n            <Row className=\"justify-content-center\"><h5>Cards Remaining: {coveredPile.length - 1}</h5></Row>\r\n            <br />\r\n            <Row className=\"justify-content-center\"><h5>Next Card:</h5></Row>\r\n            <Row className=\"justify-content-center\">\r\n              {DisplayCard(coveredPile[coveredPile.length - 1], nextCard)}\r\n            </Row>\r\n            <br />\r\n            <Row className=\"justify-content-center\"><h5>Current Card:</h5></Row>\r\n            <Row className=\"justify-content-center\">\r\n              {DisplayCard(uncoveredPile[uncoveredPile.length - 1], () => {})}\r\n            </Row>\r\n            <br />\r\n          </Col>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport function CategoriesMode(prop:{deck: CardDeck}) {\r\n  const shuffled:PlayingCard[][] = shuffleDeck(parseDeck(prop.deck.cards));\r\n  let categories:string[] = prop.deck.categories;\r\n  let display:JSX.Element[] = categories.map(category => <Col xs=\"auto\">{Pile(shuffled[categories.indexOf(category)], category)}</Col>);\r\n  return (\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            {display}\r\n          </Row>\r\n        </Container>\r\n      )\r\n}","import * as React from \"react\";\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { CardDeck, parseDeck, shuffle } from './decks';\r\nimport { PlayingCard, EmptyCard, DisplayCard} from './PlayingCard';\r\n\r\n//randomly deal cards out into a 5x5 grid\r\nexport function GridMode(prop: {deck:CardDeck}): JSX.Element {\r\n    const flattened:PlayingCard[] = parseDeck(prop.deck.cards).reduce((accumulator, value) => accumulator.concat(value), []);\r\n    const shuffled:PlayingCard[] = shuffle(flattened);\r\n    const cardsUsed:PlayingCard[] = shuffled.slice(0, 24);\r\n    const blankCard = new EmptyCard(\"shouldn't see this\");\r\n\r\n    const [cardsOpened, setCardsOpened] = React.useState(0);\r\n    const [recentCard, setRecentCard] = React.useState<PlayingCard>(blankCard);\r\n\r\n    //create two dim array of playing cards for grid\r\n    const [cardGrid, setGrid] = React.useState([\r\n        [cardsUsed[0], cardsUsed[1], cardsUsed[2], cardsUsed[3], cardsUsed[4]],\r\n        [cardsUsed[5], cardsUsed[6], cardsUsed[7], cardsUsed[8], cardsUsed[9]],\r\n        [cardsUsed[10], cardsUsed[11], new EmptyCard(\"Uncover any of the surrounding 8 cards\"), cardsUsed[12], cardsUsed[13]],\r\n        [cardsUsed[14], cardsUsed[15], cardsUsed[16], cardsUsed[17], cardsUsed[18]],\r\n        [cardsUsed[19], cardsUsed[20], cardsUsed[21], cardsUsed[22], cardsUsed[23]]\r\n    ]);\r\n\r\n    //disable uncover buttons for all cards\r\n    for (let card of cardsUsed) {\r\n        card.disableButton();\r\n    }\r\n\r\n    function uncoverCard(row:number, col:number):void {\r\n        cardGrid[row][col].uncover();\r\n        cardGrid[row][col].select();\r\n        if (recentCard !== blankCard) {\r\n            recentCard.deselect();\r\n        }\r\n        if (cardsOpened === 0) {\r\n            disableInnerMostCards();\r\n            cardGrid[2][2] = new EmptyCard(\"Only cards next to previously opened cards can be uncovered\")\r\n        }\r\n        if (row > 0) {\r\n            cardGrid[row - 1][col].enableButton();\r\n        }\r\n        if (row < 4) {\r\n            cardGrid[row + 1][col].enableButton();\r\n        }\r\n        if (col > 0) {\r\n            cardGrid[row][col - 1].enableButton();\r\n        }\r\n        if (col < 4) {\r\n            cardGrid[row][col + 1].enableButton();\r\n        }\r\n        setRecentCard(cardGrid[row][col]);\r\n        setGrid(cardGrid);\r\n        setCardsOpened(cardsOpened + 1);\r\n    }\r\n\r\n    function disableInnerMostCards() {\r\n        cardGrid[1][1].disableButton();\r\n        cardGrid[1][2].disableButton();\r\n        cardGrid[1][3].disableButton();\r\n        cardGrid[2][1].disableButton();\r\n        cardGrid[2][3].disableButton();\r\n        cardGrid[3][1].disableButton();\r\n        cardGrid[3][2].disableButton();\r\n        cardGrid[3][3].disableButton();\r\n    }\r\n\r\n    //enable the innermost cards\r\n    if (cardsOpened === 0) {\r\n        cardGrid[1][1].enableButton();\r\n        cardGrid[1][2].enableButton();\r\n        cardGrid[1][3].enableButton();\r\n        cardGrid[2][1].enableButton();\r\n        cardGrid[2][3].enableButton();\r\n        cardGrid[3][1].enableButton();\r\n        cardGrid[3][2].enableButton();\r\n        cardGrid[3][3].enableButton();\r\n    }\r\n\r\n    function GridSquare(row:number, col:number):JSX.Element {\r\n        return (\r\n            <Col>{DisplayCard(cardGrid[row][col], ()=>{uncoverCard(row,col)})}</Col>\r\n        )\r\n    }\r\n\r\n    function GridRow(row:number, cols:number):JSX.Element {\r\n\r\n        let rowArr = [];\r\n        for (let i = 0; i < cols; i++) {\r\n            rowArr.push(GridSquare(row, i));\r\n        }\r\n\r\n        return (\r\n            <Row className=\"justify-content-center\" sm={5} xs = {5}>\r\n                {rowArr}\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            {GridRow(0, 5)}\r\n            <br />\r\n            {GridRow(1, 5)}\r\n            <br />\r\n            {GridRow(2, 5)}\r\n            <br />\r\n            {GridRow(3, 5)}\r\n            <br />\r\n            {GridRow(4, 5)}\r\n        </Container>\r\n    )\r\n}","import './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { CardTuple, QuestionCard, AccordionCardDisplay } from './PlayingCard';\r\nimport { CardDeck } from \"./decks\";\r\n\r\nexport function ExportDeck(prop: {deck:CardDeck}): JSX.Element {\r\n    const flattened:CardTuple[] = prop.deck.cards.reduce((accumulator, value) => accumulator.concat(value), []);\r\n\r\n    let deckText:string = \"\";\r\n    for (let card of flattened) {\r\n        let cardInfo:string = card[0] + \"|\" + card[1] + \"|\" + card[2] + \"|\" + card[3] + \"\\n\";\r\n        deckText = deckText + cardInfo;\r\n    }\r\n\r\n    return (\r\n        <pre>{deckText}</pre>\r\n    )\r\n}\r\n\r\nconst openCard = new QuestionCard(\"Title\", \"Depth Level\", \"Question\", \"Category\");\r\nopenCard.uncover();\r\nconst closedCard = new QuestionCard(\"Title\", \"Depth Level\", \"Question\", \"Category\");\r\nclosedCard.disableButton();\r\nconst openSampleCard = new QuestionCard(\"Names\", \"Launch\", \"What does your name mean?\", \"Self\");\r\nopenSampleCard.uncover();\r\nconst closedSampleCard = new QuestionCard(\"Names\", \"Launch\", \"What does your name mean?\", \"Self\");\r\nclosedSampleCard.disableButton();\r\nconst openMissingCard = new QuestionCard(\"\", \"\\u200b\", \"What does your name mean?\", \"Self\");\r\nopenMissingCard.uncover();\r\nconst closedMissingCard = new QuestionCard(\"\", \"\\u200b\", \"What does your name mean?\", \"Self\");\r\nclosedMissingCard.disableButton();\r\n\r\nexport const importText:JSX.Element = (\r\n    <>\r\n        <p>Question Cards in open talk are made up 4 components - Question Title, Depth Level, Question and Category. These components are displayed in the following manner:</p>\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    Question Card Layout (click to expand)\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        {AccordionCardDisplay(openCard, closedCard)}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <p>To import questions, each of these components must be separated by the <a href=\"https://en.wikipedia.org/wiki/Vertical_bar\" target=\"_blank\" rel=\"noreferrer\">vertical bar (|)</a> character\r\n                in this order: Question Title|Depth Level|Question|Category</p>\r\n        <p>For example, for a Question where the Question Title is \"Names\", the Depth Level is \"Launch\", the Question is \"What does your name mean?\" and the Category is \"Self\", \r\n            it will be typed as</p> \r\n        <p>Names|Launch|What does your name mean?|Self</p>\r\n        <p>and displayed as follows:</p>\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    Sample Card Layout (click to expand)\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        {AccordionCardDisplay(openSampleCard, closedSampleCard)}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <p>Question Titles and Depth Levels are optional, but the vertical pipe character still needs to be put in.</p>\r\n        <p>For example, \"||What does your name mean?|Self\" will import a Question Card without a Title and Depth Level, and will be displayed as follows:</p>\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    Card with Missing Question Title and Depth Level (click to expand)\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        {AccordionCardDisplay(openMissingCard, closedMissingCard)}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <p>Take note that each Question Card must be put on its own line, and the maximum number of Categories is 10.</p>\r\n        <p>It is recommended to type out the Question Cards in a separate program before copying and pasting it in.</p>\r\n    </>\r\n);","import './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { QuestionCard, AccordionCardDisplay } from './PlayingCard';\r\n\r\nconst openCard = new QuestionCard(\"\", \"Depth Level\", \"Question\", \"Category\");\r\nopenCard.uncover();\r\nconst closedCard = new QuestionCard(\"\", \"Depth Level\", \"Question\", \"Category\");\r\nclosedCard.disableButton();\r\nconst openSampleCard = new QuestionCard(\"\", \"Launch\", \"What are your pet peeves?\", \"Self\");\r\nopenSampleCard.uncover();\r\nconst closedSampleCard = new QuestionCard(\"\", \"Launch\", \"What are your pet peeves?\", \"Self\");\r\nclosedSampleCard.disableButton();\r\n\r\nexport const aboutText:JSX.Element = (\r\n    <>\r\n        <br />\r\n        <p>Welcome to open talk, a conversation-starter game for more meaningful online interactions.</p>\r\n        <p>Click each header to expand it.</p>\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    Instructions\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        <p>The general flow of open talk is as follows:</p>\r\n                        <ol>\r\n                            <li>Choose and uncover a card</li>\r\n                            <li>Answer the question on the card</li>\r\n                            <li>Ask and answer any follow-up questions, if any</li>\r\n                            <li>Repeat for the next person</li>\r\n                        </ol>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    open talk Cards\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        <p>Cards in open talk have three components - Question, Category, and Depth Level</p>\r\n                        <p>They are displayed on the card in the following manner:</p>\r\n                        {AccordionCardDisplay(openCard, closedCard)}\r\n                        <p>In the card below, \"What are your pet peeves?\" is the Question, \"Self\" is the Category and \"Launch\" is the Depth Level</p>\r\n                        {AccordionCardDisplay(openSampleCard, closedSampleCard)}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    Game Modes\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        <p>open talk has two playing modes:</p>\r\n                        <ol>\r\n                            <li>Categories mode - the deck is split into its categories, cards can be played from any one of them</li>\r\n                            <li>Grid mode - cards are randomly shuffled and arranged into a 5 x 5 grid</li>\r\n                        </ol>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    The open talk deck\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        <p>The open talk deck has four categories:</p>\r\n                        <ul>\r\n                            <li>SELF - personality, preferences, priorities</li>\r\n                            <li>CLAN - family, friends, the people around you</li>\r\n                            <li>LOVE - romance, love, and that special someone</li>\r\n                            <li>FUN - Weird, quirky and surprising questions</li>\r\n                        </ul>\r\n                        <p>Each category, apart from the Fun category, has two levels of depth:</p>\r\n                        <ul>\r\n                            <li>LAUNCH - Launching points for getting to know others better</li>\r\n                            <li>DIVE - Deep dives into your values, experiences, and who you are as a person</li>\r\n                        </ul>\r\n                        <p>Submit your feedback on this deck <a href=\"https://bit.ly/opentalkfb\" target=\"_blank\" rel=\"noreferrer\">here</a>.</p>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    Custom Decks\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        <p>\r\n                            Ever had burning questions to ask your friends, or inside jokes and references you want to put in your questions?\r\n                            open talk allows you to create your own questions and decks with up to 10 categories!\r\n                        </p>\r\n                        <p>Instructions on how to do so can be found in the Import Custom Deck segment</p>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n        <br />\r\n        <Accordion>\r\n            <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                    About this website\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        <p>open talk is open in three senses of the word:</p>\r\n                        <ol>\r\n                            <li>It promotes openness and vulnerability when answering questions and sharing about each other</li>\r\n                            <li>It is open in allowing custom decks and questions to be played with on this website</li>\r\n                            <li>The code of this website is open-source and found in the link below</li>\r\n                        </ol>\r\n                        <p>open talk is inspired by <a href=\"https://www.starknicked.com\" target=\"_blank\" rel=\"noreferrer\">smol tok</a>, created by Nick Pang.</p>\r\n                        <p>\r\n                            open talk is distributed under the <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noreferrer\">GNU General Public License v3</a>. \r\n                            Check out its GitHub repository <a href=\"https://github.com/luminousleek/open-talk\" target=\"_blank\" rel=\"noreferrer\">here</a>.\r\n                        </p>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n    </>\r\n)","import Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport function MenuCard(prop:{header: string, title: string, cardText: string, buttonText: string, onClick:() => void, disableButton:boolean}): JSX.Element {\r\n    \r\n    const card = (\r\n        <>\r\n            <Card style={{ width: '15rem', height: '20rem'}}>\r\n                <Card.Header>{prop.header}</Card.Header>\r\n                <Card.Body>\r\n                <Card.Title>{prop.title}</Card.Title>\r\n                <Card.Text>{prop.cardText}</Card.Text>\r\n                </Card.Body>\r\n                <Button variant=\"info\" onClick={prop.onClick} disabled = {prop.disableButton}>{prop.buttonText} </Button>\r\n            </Card>\r\n            <br />\r\n        </>\r\n        \r\n    )\r\n    return card;\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { AppModes } from './AppModes';\r\nimport { CategoriesMode } from './Categories';\r\nimport { GridMode } from './Grid';\r\nimport { CardTuple } from './PlayingCard';\r\nimport { CardDeck, openTalkDeck, flatten } from \"./decks\";\r\nimport { ExportDeck, importText } from './importExportFile';\r\nimport { aboutText } from './About';\r\nimport { MenuCard } from './MenuCard';\r\nimport './App.css';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nfunction App() {\r\n\r\n  // constants\r\n  const MAX_CATEGORIES:number = 10;\r\n  const MAX_DECK_TITLE_LENGTH:number = 30;\r\n  const MAX_DECK_CHAR_LENGTH:number = 30000;\r\n  const MIN_GRID_MODE_CARDS:number = 24;\r\n\r\n  // hooks for state\r\n  const [mode, setMode] = React.useState<AppModes>(AppModes.MainScreen);\r\n  const [deck, setDeck] = React.useState<CardDeck>(openTalkDeck);\r\n  \r\n  const [importQns, setQn] = React.useState(\"Question Title|Depth Level|Question|Category\");\r\n  const [importTitle, setTitle] = React.useState(\"Custom Deck\");\r\n  const [hasImported, setImported] = React.useState(false);\r\n  const [importDeck, setImportDeck] = React.useState<CardDeck>({cards:[], title:\"\", categories: []});\r\n  const [isValidImport, setValidImport] = React.useState(false);\r\n  const [importErrorString, setErrorString] = React.useState(\"\");\r\n  const [hasImportError, toggleImportError] = React.useState(false);\r\n\r\n  // to force the dom to re-render when starting a new game\r\n  // it's very clunky so if you know a better solution let me know thanks\r\n  const [forceRender, toggleRender] = React.useState(true);\r\n  const [forceRender2, toggleRender2] = React.useState(false);\r\n\r\n  function toggleRenders() {\r\n    forceRender ? toggleRender(false) : toggleRender(true);\r\n    forceRender2 ? toggleRender2(false) : toggleRender2(true);\r\n  }\r\n\r\n  // function to handle importing a custom deck\r\n  const handleImport = (event:React.FormEvent) => {\r\n    event.preventDefault();\r\n    if (hasImported) {\r\n      //popup to warn of overwriting custom deck\r\n      const ImportSwal = withReactContent(Swal);\r\n      ImportSwal.fire({\r\n        title: 'Are you sure?',\r\n        text: \"Importing a new deck will overwrite \" + importDeck.title,\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Yes, overwrite it!',\r\n        confirmButtonColor: '#3682fb',\r\n        cancelButtonText: 'No, cancel!',\r\n        reverseButtons: true\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          actuallyImport();\r\n        }\r\n      })\r\n    } else {\r\n      actuallyImport();\r\n    }\r\n  }\r\n\r\n  function actuallyImport() {\r\n    let importedDeck: CardDeck = {\r\n      cards: [],\r\n      title: \"Custom Deck\",\r\n      categories: []\r\n    };\r\n    let errors:string[] = [];\r\n    let errorString:string = \"\";\r\n    let numCards:number = 0;\r\n    toggleImportError(false);\r\n\r\n    let category:string = \"\";\r\n    let categoryIndex:number = 0;\r\n    let categoryCount:number = 0;\r\n    const categoryMap = new Map();\r\n\r\n    const cards:string[] = importQns.split(\"\\n\");\r\n    \r\n    for (let cardString of cards) {\r\n      // ignore blank rows  \r\n      if (cardString === \"\") {\r\n        continue;\r\n      }\r\n      let cardInfo:string[] = cardString.split(\"|\", 4);\r\n      if (cardInfo.length < 4) {\r\n        cardString = cardString + \" - Missing | character(s)\";\r\n        errors.push(cardString);\r\n        continue;\r\n      }      \r\n      if (cardInfo[2] === \"\") {\r\n        cardString = cardString + \" - Missing Question Text\";\r\n        errors.push(cardString);\r\n        continue;\r\n      }\r\n      category = cardInfo[3];\r\n      if (category === \"\") {\r\n        cardString = cardString + \" - Missing Category Text\";\r\n        errors.push(cardString);\r\n        continue;\r\n      }\r\n      if (categoryMap.has(category)) {\r\n        categoryIndex = categoryMap.get(category);\r\n      } else {\r\n        // limit number of categories to MAX_CATEGORIES\r\n        if (categoryCount > MAX_CATEGORIES - 1) {\r\n          cardString = cardString + \" - Exceeded Maximum Number of Categories\";\r\n          errors.push(cardString);\r\n          continue;\r\n        }\r\n        categoryIndex = categoryCount;\r\n        categoryMap.set(category, categoryIndex);\r\n        importedDeck.categories.push(category);\r\n        importedDeck.cards[categoryIndex] = [];\r\n        categoryCount++;\r\n      }\r\n      let cardTuple:CardTuple = [cardInfo[0], cardInfo[1], cardInfo[2], cardInfo[3]];\r\n\r\n      // if missing depth level, set it to 0 width space\r\n      if (cardTuple[1] === \"\") {\r\n        cardTuple[1] = \"\\u200b\";\r\n      }\r\n\r\n      importedDeck.cards[categoryIndex].push(cardTuple);\r\n      numCards++;\r\n    }\r\n    \r\n    importedDeck.title = importTitle;\r\n    if (errors.length > 0) {\r\n      for (let error of errors) {\r\n        errorString = errorString + error + \"\\n\";\r\n      }\r\n      toggleImportError(true);\r\n    }\r\n    setErrorString(errorString);\r\n    if (numCards > 0) {\r\n      setImported(true);\r\n      setImportDeck(importedDeck);\r\n      setDeck(importedDeck);\r\n      setValidImport(true);\r\n    } else {\r\n      setValidImport(false);\r\n    }\r\n    setMode(AppModes.Imported);\r\n  }\r\n\r\n  function handleNewGame() {\r\n    const newGameSwal = withReactContent(Swal);\r\n    newGameSwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"This will reset all cards opened!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Yes, start a new game!\",\r\n      confirmButtonColor: '#3682fb',\r\n      cancelButtonText: 'No, cancel!',\r\n      reverseButtons: true\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        toggleRenders();\r\n      }\r\n    })\r\n  }\r\n\r\n  let display:JSX.Element = <h1>Hello World!</h1>\r\n\r\n  let header:JSX.Element = (\r\n    <Container fluid>\r\n        <Row className=\"justify-content-center\"><h1>open talk</h1></Row>\r\n        <Row className=\"justify-content-center\"><h3>An online conversational tool</h3></Row>\r\n    </Container>\r\n  );\r\n\r\n  function ScreenHeader(prop: {title:string}):JSX.Element {\r\n    return (\r\n      <Row className=\"justify-content-center\">\r\n        <h3>{prop.title}</h3>\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  let deckHeader:JSX.Element = (\r\n    <Row className=\"justify-content-center\">\r\n      <h4>Deck Selected: {deck.title}</h4>\r\n    </Row>\r\n  )\r\n\r\n  let modeSelectButtons:JSX.Element = (\r\n    <Row className=\"justify-content-center\" xs={2}>\r\n      <Col xs=\"auto\"><Button onClick={() => setMode(AppModes.SelectGameMode)}>Select another Game Mode</Button></Col>\r\n      <Col xs=\"auto\"><Button onClick={() => setMode(AppModes.MainScreen)}>Return to the Main Menu</Button></Col>\r\n    </Row>\r\n  )\r\n\r\n  let mainMenuButton:JSX.Element = (\r\n    <Row className=\"justify-content-center\">\r\n      <Col xs=\"auto\"><Button onClick={() => setMode(AppModes.MainScreen)}>Return to the Main Menu</Button></Col>\r\n    </Row>\r\n  )\r\n\r\n  let newGameButton:JSX.Element = (\r\n    <Row className=\"justify-content-center\">\r\n      <Col xs=\"auto\"><Button onClick={handleNewGame}>New Game</Button></Col>\r\n    </Row>\r\n  )\r\n\r\n  switch (mode as AppModes) {\r\n    case AppModes.MainScreen: {\r\n      display = (\r\n        <Container fluid>\r\n          <ScreenHeader title = \"Main Menu\" />\r\n          <br />\r\n          <Row className=\"justify-content-center\">\r\n            <Col xs=\"auto\">\r\n              <MenuCard header = \"Play\" title = \"open talk\" cardText = \"Questions to get to know people in varying levels of depth.\"\r\n                onClick = {() => {setDeck(openTalkDeck); setMode(AppModes.SelectGameMode)}} buttonText = \"Play open talk\" disableButton = {false}/>\r\n            </Col>\r\n            {hasImported &&\r\n            <Col xs=\"auto\">\r\n              <MenuCard header = \"Play\" title = {importDeck.title} cardText = \"The custom deck that you have imported previously\"\r\n                onClick = {() => {setDeck(importDeck); setMode(AppModes.SelectGameMode)}} buttonText = {\"Play  \" + importDeck.title} disableButton = {false}/>\r\n            </Col>\r\n            }\r\n            <Col xs=\"auto\">\r\n              <MenuCard header = \"Import\" title = \"Import Custom Deck\" cardText = \"Import a custom deck with your own questions! Note that there can only be one imported deck loaded at a time.\" \r\n                onClick = {() => {setMode(AppModes.Importing)}} buttonText = \"Import Custom Deck\" disableButton = {false}/>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <MenuCard header = \"About\" title = \"About open talk\" cardText = \"Information about open talk, and instructions on how to play it\"\r\n                onClick = {() => {setMode(AppModes.About)}} buttonText = \"About open talk\" disableButton = {false}/>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      )\r\n      break;\r\n    }\r\n    case AppModes.SelectGameMode: {\r\n      display = (\r\n        <Container fluid>\r\n          <ScreenHeader title = \"Select Playing Mode\" />\r\n          {deckHeader}\r\n          <br />\r\n          <Row className=\"justify-content-center\">\r\n            <Col xs=\"auto\">\r\n              <MenuCard header = \"Mode\" title = \"Categories\" cardText = \"Deck is split into its categories, choose a card from any of the categories\"\r\n                onClick = {() => {setMode(AppModes.Categories)}} buttonText = \"Select Categories Mode\" disableButton = {false}/>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <MenuCard header = \"Mode\" title = \"Grid\" cardText = {\"Cards are arranged into a 5 by 5 grid.\\n\\nRequires at least \" + MIN_GRID_MODE_CARDS + \" cards in the deck. Best played in landscape orientation.\"}\r\n                onClick = {() => {setMode(AppModes.Grid)}} buttonText = \"Select Grid Mode\" disableButton = {(flatten(deck.cards).length < MIN_GRID_MODE_CARDS)}/>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          {mainMenuButton}\r\n          <br />\r\n        </Container>\r\n      )\r\n      break;\r\n    } \r\n    case AppModes.Categories: {\r\n      display = (\r\n        <Container fluid>\r\n          <ScreenHeader title = \"Categories Mode\" />\r\n          {deckHeader}\r\n          <br />\r\n          {forceRender && <CategoriesMode deck={deck} />}\r\n          {forceRender2 && <CategoriesMode deck={deck} />}\r\n          <br />\r\n          {newGameButton}\r\n          <br />\r\n          {modeSelectButtons}\r\n          <br />\r\n        </Container>\r\n      )\r\n      break;\r\n    } \r\n    case AppModes.Grid: {\r\n      display = (\r\n        <Container fluid>\r\n          <ScreenHeader title = \"Grid Mode\" />\r\n          {deckHeader}\r\n          <br />\r\n          {forceRender && <GridMode deck={deck} />}\r\n          {forceRender2 && <GridMode deck={deck} />}\r\n          <br />\r\n          {newGameButton}\r\n          <br />\r\n          {modeSelectButtons}\r\n          <br />\r\n        </Container>\r\n      )\r\n      break;\r\n    } \r\n    case AppModes.Importing: {\r\n      display = (\r\n        <Container>\r\n          <ScreenHeader title = \"Import Custom Deck\" />\r\n          {importText}\r\n          <br />\r\n          <Form id=\"importForm\" onSubmit={handleImport}>\r\n            <Form.Group controlId=\"import.Title\">\r\n              <Form.Label>Input a title for your Custom Deck (max {MAX_DECK_TITLE_LENGTH} characters)</Form.Label>\r\n              <Form.Control as=\"input\" onChange={e => setTitle(e.target.value)} required defaultValue={importTitle} maxLength={MAX_DECK_TITLE_LENGTH}/>\r\n            </Form.Group>\r\n            \r\n            <Form.Group controlId=\"import.Questions\">\r\n              <Form.Label>Input Custom Question Cards below (max {MAX_DECK_CHAR_LENGTH} characters)</Form.Label>\r\n              <Form.Control as=\"textarea\" rows={15} onChange={e => setQn(e.target.value)} required defaultValue={importQns} maxLength={MAX_DECK_CHAR_LENGTH}/>\r\n            </Form.Group>\r\n            <Button type=\"submit\">Import Deck</Button>\r\n          </Form>\r\n          <br />\r\n          {mainMenuButton}\r\n          <br />\r\n        </Container>\r\n      )\r\n      break;\r\n    } \r\n    case AppModes.Imported: {\r\n      display = (\r\n        <Container>\r\n          <ScreenHeader title = \"Custom Deck Import Results\" />\r\n          {isValidImport &&\r\n            <div>\r\n              <h5>{importDeck.title} imported</h5>\r\n              <p>The following cards were imported. You can copy the following text and paste it into a file.</p>\r\n              <ExportDeck deck={importDeck} />\r\n            </div>}\r\n            {!isValidImport &&\r\n            <div>\r\n              <h5>Custom Deck not imported</h5>\r\n              <p>None of the question cards typed in were imported successfully. Please return to the import deck screen and try again.</p>\r\n            </div>}\r\n          {hasImportError && \r\n            <div>\r\n              <p>The following question cards were not imported: </p>\r\n              <pre>{importErrorString}</pre>\r\n            </div>\r\n          }\r\n          <br />\r\n          <Row className=\"justify-content-center\">\r\n            {isValidImport && <Col xs=\"auto\"><Button onClick={() => setMode(AppModes.SelectGameMode)}>Select Game Mode</Button></Col>}\r\n          </Row>\r\n          <br />\r\n          <Row className=\"justify-content-center\">\r\n            <Col xs=\"auto\"><Button onClick={() => setMode(AppModes.Importing)}>Return to Import Deck screen</Button></Col>\r\n          </Row>\r\n          <br />\r\n        </Container>\r\n      )\r\n      break;\r\n    } \r\n    case AppModes.About: {\r\n      display = (\r\n        <Container>\r\n          <ScreenHeader title = \"About open talk\" />\r\n          {aboutText}\r\n          <br />\r\n          {mainMenuButton}\r\n          <br />\r\n        </Container>\r\n      );\r\n      break;\r\n    }\r\n    default: {\r\n      display = <h1>Something went wrong!</h1>\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {header}\r\n      <br />\r\n      {display}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}